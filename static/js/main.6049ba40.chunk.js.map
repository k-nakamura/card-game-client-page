{"version":3,"sources":["const/player.ts","redux/const/GameConst.ts","redux/action/GameAction.ts","types/card.tsx","const/card.ts","redux/const/LogConst.ts","redux/action/LogAction.ts","component/FirstCardInputForm.tsx","component/DrawCardInputForm.tsx","component/OtherPlayerCardInputForm.tsx","logic/SelectCard.ts","logic/IsEnableCard.ts","component/MyCardInputForm.tsx","logic/SelectColor.ts","component/GameArea.tsx","component/LogArea.tsx","component/HandArea.tsx","view/Home.tsx","App.tsx","reportWebVitals.ts","types/log.tsx","redux/reducer/LogReducer.ts","redux/reducer/GameReducer.ts","redux/reducer/RootReducer.ts","index.tsx"],"names":["PLAYER_LIST","PLAYER_OPTIONS","map","name","index","key","text","value","SET_START","ADD_HAND","PUT_CARD","DISCARD_CARD","PASS","DRAW","putCard","card","type","payload","pass","Card","card_id","color","this","CARD_LIST","WILD_DRAW_4","CARD_OPTIONS","COLOR_LIST","CARD_COLOR_OPTIONS","ADD_LOG","addLog","playerId","FirstCardInputForm","dispatch","useDispatch","useState","cardId","setCardId","setColor","player","setPlayer","isDisabled","Segment","Header","Form","Field","Dropdown","selection","options","onChange","_","e","Number","Button","content","onClick","primary","disabled","DrawCardInputForm","game","useSelector","state","draw","OtherPlayerCardInputForm","currentPlayerId","secondary","selectCard","hands","currentCard","sort","a","b","find","hand","isEnableCard","undefined","MyCardInputForm","onPut","discardIndex","selectedIndex","hadDrawn","cardContent","selectedCard","countByColor","filter","c","length","indexOf","Math","max","selectColor","GameArea","LogArea","log","List","divided","logs","l","contents","Item","HandArea","h","Home","Container","className","Grid","Row","centered","Column","width","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Log","player_id","initialState","LogReducer","action","isReversed","nextPlayer","GameReducer","nextState","nextPlayerId","nextNextPlayerId","splice","RootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6049ba40.chunk.js","sourcesContent":["export const PLAYER_LIST = [\n  '自分',\n  '左隣',\n  '正面',\n  '右隣',\n];\n\nexport const PLAYER_OPTIONS = PLAYER_LIST.map(\n  (name, index) => ({\n    key: 'player_' + index,\n    text: name,\n    value: index,\n  }));\n\nexport const MYSELF = 0;","export const SET_START = 'SET_START' as const;\nexport const ADD_HAND = 'ADD_HAND' as const;\nexport const PUT_CARD = 'PUT_CARD' as const;\nexport const DISCARD_CARD = 'DISCARD_CARD' as const;\nexport const PASS = 'PASS' as const;\nexport const DRAW = 'DRAW' as const;","import {ADD_HAND, DISCARD_CARD, DRAW, PASS, PUT_CARD, SET_START} from \"../const/GameConst\";\nimport {Card} from \"../../types/card\";\n\nexport const setStart = (playerId: number, card: Card) => ({\n  type: SET_START,\n  payload: {\n    playerId,\n    card,\n  }\n});\n\nexport const addHand = (card: Card) => ({\n  type: ADD_HAND,\n  payload: {\n    card,\n  }\n});\n\nexport const putCard = (card: Card) => ({\n  type: PUT_CARD,\n  payload: {\n    card,\n  },\n});\n\nexport const discardCard = (index: number) => ({\n  type: DISCARD_CARD,\n  payload: {\n    index,\n  },\n});\n\nexport const pass = () => ({\n  type: PASS,\n  payload: {},\n})\n\nexport const draw = () => ({\n  type: DRAW,\n  payload: {},\n});\n\nexport type GameAction = (\n  | ReturnType<typeof setStart>\n  | ReturnType<typeof addHand>\n  | ReturnType<typeof putCard>\n  | ReturnType<typeof discardCard>\n  | ReturnType<typeof pass>\n  | ReturnType<typeof draw>\n  )","export class Card {\n  public card_id: number;\n  public color: number;\n\n  constructor(card_id: number, color: number) {\n    this.card_id = card_id;\n    this.color = color;\n  }\n}","export const CARD_LIST = [\n  '0',\n  '1',\n  '2',\n  '3',\n  '4',\n  '5',\n  '6',\n  '7',\n  '8',\n  '9',\n  'ドロー2',\n  'リバース',\n  'スキップ',\n  'ワイルド',\n  'ワイルドドロー4',\n];\n\nexport const DRAW_2 = 10;\nexport const REVERSE = 11;\nexport const SKIP = 12;\nexport const WILD = 13;\nexport const WILD_DRAW_4 = 14;\n\nexport const CARD_OPTIONS = CARD_LIST.map(\n  (name, index) => ({\n    key: 'card_' + index,\n    text: name,\n    value: index,\n  }));\n\nexport const COLOR_LIST = [\n  '-',\n  '青',\n  '緑',\n  '赤',\n  '黄',\n];\n\nexport const CARD_COLOR_OPTIONS = COLOR_LIST.map(\n  (name, index) => ({\n    key: 'color_' + index,\n    text: name,\n    value: index,\n  }));\n\nexport const WILD_COLOR = 0;\n","export const ADD_LOG = 'ADD_LOG' as const;","import {Card} from \"../../types/card\";\nimport {ADD_LOG} from \"../const/LogConst\";\n\nexport const addLog = (playerId: number | null, card: Card | null) => ({\n  type: ADD_LOG,\n  payload: {\n    playerId,\n    card,\n  }\n});\n\nexport type LogAction = (\n  | ReturnType<typeof addLog>\n  )","import {Dropdown, Form, Header, Segment} from \"semantic-ui-react\";\nimport {PLAYER_OPTIONS} from \"../const/player\";\nimport React, {useState} from \"react\";\nimport {setStart} from \"../redux/action/GameAction\";\nimport {Card} from \"../types/card\";\nimport {useDispatch} from \"react-redux\";\nimport {CARD_COLOR_OPTIONS, CARD_OPTIONS, WILD, WILD_COLOR, WILD_DRAW_4} from \"../const/card\";\nimport {addLog} from \"../redux/action/LogAction\";\n\nexport default function FirstCardInputForm() {\n  const dispatch = useDispatch();\n\n  const [cardId, setCardId] = useState(0);\n  const [color, setColor] = useState(0);\n  const [player, setPlayer] = useState(0);\n\n  const onSubmit = () => {\n    dispatch(setStart(player, new Card(cardId, color)));\n    dispatch(addLog(null,new Card(cardId, color)));\n  }\n\n  const isDisabled = (cardId === WILD || cardId === WILD_DRAW_4) === (color !== WILD_COLOR);\n\n  return (\n    <Segment>\n      <Header>最初のカードと親を入力してください</Header>\n      <Form>\n        <Form.Field>\n          <label>種類</label>\n          <Dropdown selection options={CARD_OPTIONS} value={cardId}\n                    onChange={(_, e) => setCardId(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>色</label>\n          <Dropdown selection options={CARD_COLOR_OPTIONS} value={color}\n                    onChange={(_, e) => setColor(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>親</label>\n          <Dropdown selection options={PLAYER_OPTIONS} value={player}\n                    onChange={(_, e) => setPlayer(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Form.Button content={'決定'} onClick={onSubmit} primary disabled={isDisabled}/>\n        </Form.Field>\n      </Form>\n      <div>\n      </div>\n    </Segment>\n  );\n}\n","import {Dropdown, Form, Header, Segment} from \"semantic-ui-react\";\nimport React, {useState} from \"react\";\nimport {addHand} from \"../redux/action/GameAction\";\nimport {Card} from \"../types/card\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CARD_COLOR_OPTIONS, CARD_OPTIONS, WILD, WILD_COLOR, WILD_DRAW_4} from \"../const/card\";\n\nexport default function DrawCardInputForm() {\n  const dispatch = useDispatch();\n  const game = useSelector(state => state.game);\n\n  const [cardId, setCardId] = useState(0);\n  const [color, setColor] = useState(0);\n\n  const onSubmit = () => {\n    dispatch(addHand(new Card(cardId, color)));\n  }\n\n  const isDisabled = (cardId === WILD || cardId === WILD_DRAW_4) === (color !== WILD_COLOR);\n\n  return (\n    <Segment>\n      <Header>ドローしたカードを入力してください(残り: {game.draw}枚)</Header>\n      <Form>\n        <Form.Field>\n          <label>種類</label>\n          <Dropdown selection options={CARD_OPTIONS} value={cardId}\n                    onChange={(_, e) => setCardId(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>色</label>\n          <Dropdown selection options={CARD_COLOR_OPTIONS} value={color}\n                    onChange={(_, e) => setColor(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <Form.Button content={'決定'} onClick={onSubmit} primary disabled={isDisabled}/>\n        </Form.Field>\n      </Form>\n    </Segment>\n  );\n}","import {Dropdown, Form, Header, Segment} from \"semantic-ui-react\";\nimport {PLAYER_LIST} from \"../const/player\";\nimport React, {useState} from \"react\";\nimport {CARD_COLOR_OPTIONS, CARD_OPTIONS} from \"../const/card\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Card} from \"../types/card\";\nimport {addLog} from \"../redux/action/LogAction\";\nimport {pass, putCard} from \"../redux/action/GameAction\";\n\nexport default function OtherPlayerCardInputForm() {\n  const dispatch = useDispatch();\n  const game = useSelector(state => state.game);\n\n  const [cardId, setCardId] = useState(0);\n  const [color, setColor] = useState(0);\n\n\n  const onPutCard = () => {\n    let card: Card = new Card(cardId, color);\n\n    dispatch(addLog(game.currentPlayerId, card));\n    dispatch(putCard(card));\n  }\n\n  const onPass = () => {\n    dispatch(addLog(game.currentPlayerId, null));\n    dispatch(pass());\n  }\n\n  return (\n    <Segment>\n      <Header>{PLAYER_LIST[game.currentPlayerId]}のプレイヤが出したカードを入力してください</Header>\n      <Form>\n        <Form.Field>\n          <label>種類</label>\n          <Dropdown selection options={CARD_OPTIONS} value={cardId}\n                    onChange={(_, e) => setCardId(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <label>色</label>\n          <Dropdown selection options={CARD_COLOR_OPTIONS} value={color}\n                    onChange={(_, e) => setColor(Number(e.value))}\n          />\n        </Form.Field>\n        <Form.Field>\n          <div>\n            <Form.Button content={'決定'} onClick={onPutCard} primary/>\n            <Form.Button content={'パス'} onClick={onPass} secondary/>\n          </div>\n        </Form.Field>\n      </Form>\n    </Segment>\n  );\n}","import {Card} from \"../types/card\";\nimport isEnableCard from \"./IsEnableCard\";\n\nexport default function selectCard(hands: Card[], currentCard: Card): null|number {\n  // 手札に対して出すカードを一意的に決定するため優先度順でソートする\n  let selectCard = hands\n    .map((card, index) => ({\n      index,\n      card,\n    }))\n    .sort((a, b) => {\n      return a.card.card_id - b.card.card_id || a.card.color - b.card.color;\n    })\n    .find((hand) => isEnableCard(hand.card, currentCard));\n\n  if (selectCard === undefined) {\n    return null;\n  } else {\n    return selectCard.index;\n  }\n}","import {Card} from \"../types/card\";\nimport {WILD, WILD_COLOR, WILD_DRAW_4} from \"../const/card\";\n\nexport default function isEnableCard(card: Card, currentCard: Card) {\n  // 親が右隣のプレイヤーでワイルドが最初のカードの場合\n  if (currentCard.color === WILD_COLOR) {\n    return true;\n  }\n\n  // ワイルド\n  if (card.card_id === WILD || card.card_id === WILD_DRAW_4) {\n    return true;\n  }\n\n  return card.card_id === currentCard.card_id || card.color === currentCard.color;\n}","import {useDispatch, useSelector} from \"react-redux\";\nimport React from \"react\";\nimport {Card} from \"../types/card\";\nimport selectCard from \"../logic/SelectCard\";\nimport {Form, Header, Segment} from \"semantic-ui-react\";\nimport {CARD_LIST, COLOR_LIST, WILD, WILD_DRAW_4} from \"../const/card\";\nimport {discardCard, draw, pass, putCard} from \"../redux/action/GameAction\";\nimport {addLog} from \"../redux/action/LogAction\";\nimport selectColor from \"../logic/SelectColor\";\nimport {MYSELF} from \"../const/player\";\n\nexport function MyCardInputForm() {\n  const dispatch = useDispatch();\n  const game = useSelector(state => state.game);\n\n  const onPass = () => {\n    dispatch(pass());\n    dispatch(addLog(MYSELF, null));\n  }\n\n  const onDraw = () => {\n    dispatch(draw());\n  }\n\n  const onPut = (card: Card, discardIndex: number) => {\n    dispatch(discardCard(discardIndex));\n    dispatch(putCard(card));\n    dispatch(addLog(MYSELF, card));\n  }\n\n  if (game.currentCard !== null) {\n    const selectedIndex = selectCard(game.hand, game.currentCard);\n    if (selectedIndex === null) {\n      if (game.hadDrawn) {\n        return (\n          <Segment>\n            <Header>出すことのできるカードがありません。パスします。</Header>\n            <Form>\n              <Form.Field>\n                <Form.Button content={'パス'} onClick={onPass} secondary/>\n              </Form.Field>\n            </Form>\n          </Segment>\n        );\n      } else {\n        return (\n          <Segment>\n            <Header>出すことのできるカードがありません。ドローしてください。</Header>\n            <Form>\n              <Form.Field>\n                <Form.Button content={'決定'} onClick={onDraw} primary/>\n              </Form.Field>\n            </Form>\n          </Segment>\n        );\n      }\n    } else {\n      let cardContent: string;\n      let selectedCard = game.hand[selectedIndex];\n      if (selectedCard.card_id === WILD || selectedCard.card_id === WILD_DRAW_4) {\n        selectedCard = new Card(selectedCard.card_id, selectColor(game.hand));\n        cardContent = CARD_LIST[selectedCard.card_id] + '(色は' + COLOR_LIST[selectedCard.color] + 'を指定)'\n      } else {\n        cardContent = COLOR_LIST[selectedCard.color] + ' ' + CARD_LIST[selectedCard.card_id];\n      }\n\n      return (\n        <Segment>\n          <Header>{cardContent} を出します。</Header>\n          <Form>\n            <Form.Field>\n              <Form.Button content={'決定'} onClick={() => onPut(selectedCard, selectedIndex)} primary/>\n            </Form.Field>\n          </Form>\n        </Segment>\n      );\n    }\n  }\n\n  return (\n    <Segment>\n      <Header>異常な状態です</Header>\n    </Segment>\n  );\n}","import {Card} from \"../types/card\";\n\nexport default function selectColor(hands: Card[]) {\n  // ワイルドの場合は手札のうち最も枚数の多い色を指定する\n  const countByColor: number[] = [\n    hands.filter(c => c.color === 1).length,\n    hands.filter(c => c.color === 2).length,\n    hands.filter(c => c.color === 3).length,\n    hands.filter(c => c.color === 4).length,\n  ];\n\n  return countByColor.indexOf(Math.max(...countByColor)) + 1;\n}","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport FirstCardInputForm from \"./FirstCardInputForm\";\nimport DrawCardInputForm from \"./DrawCardInputForm\";\nimport OtherPlayerCardInputForm from \"./OtherPlayerCardInputForm\";\nimport {MyCardInputForm} from \"./MyCardInputForm\";\n\nexport default function GameArea() {\n  const game = useSelector(state => state.game);\n\n  if (game.draw !== 0) {\n    return <DrawCardInputForm/>;\n  } else if (game.currentCard === null) {\n    return <FirstCardInputForm/>;\n  } else if (game.currentPlayerId !== 0) {\n    return <OtherPlayerCardInputForm/>;\n  } else {\n    return <MyCardInputForm/>;\n  }\n}","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {List, Segment} from \"semantic-ui-react\";\nimport {CARD_LIST, COLOR_LIST, WILD_COLOR} from \"../const/card\";\nimport {PLAYER_LIST} from \"../const/player\";\n\nexport default function LogArea() {\n  const log = useSelector(state => state.log);\n\n  const listItems = () =>\n    log.logs.map((l, index) => {\n      let contents: string;\n      if (l.playerId === null) {\n        contents = '引き札の山から';\n      } else {\n        contents = `${PLAYER_LIST[l.playerId]}のプレイヤは`;\n      }\n      if (l.card === null) {\n        contents += 'パスした';\n      } else {\n        if (l.card.color === WILD_COLOR) {\n          contents += `${CARD_LIST[l.card.card_id]}を出した`;\n        } else {\n          contents += `${COLOR_LIST[l.card.color]} ${CARD_LIST[l.card.card_id]}を出した`;\n        }\n      }\n      return (<List.Item key={'log_' + index}>{contents}</List.Item>)\n    });\n\n  return (\n    <div>\n      <Segment>\n        <List divided>\n          {listItems()}\n        </List>\n      </Segment>\n    </div>\n  )\n}\n","import React from 'react';\nimport {useSelector} from \"react-redux\";\nimport {List, Segment} from \"semantic-ui-react\";\nimport {CARD_LIST, COLOR_LIST, WILD, WILD_DRAW_4} from \"../const/card\";\n\nexport default function HandArea() {\n  const hand = useSelector(state => state.game.hand);\n\n  const listItems = () =>\n    hand.map((h, index) => {\n      let contents: string = '';\n      if (h.card_id !== WILD && h.card_id !== WILD_DRAW_4) {\n        contents += COLOR_LIST[h.color] + ' ';\n      }\n      contents += CARD_LIST[h.card_id];\n      return (<List.Item key={'hand_' + index}>{contents}</List.Item>)\n    });\n\n  return (\n    <div>\n      <Segment>\n        <List divided>\n          {listItems()}\n        </List>\n      </Segment>\n    </div>\n  )\n}","import React from 'react';\nimport {Container, Grid} from \"semantic-ui-react\";\nimport GameArea from \"../component/GameArea\";\nimport LogArea from \"../component/LogArea\";\nimport HandArea from \"../component/HandArea\";\n\nexport default function Home() {\n  return (\n    <div>\n      <Container className={\"main-container\"}>\n        <Grid>\n          <Grid.Row centered>\n            <Grid.Column width={9}>\n              <LogArea/>\n            </Grid.Column>\n            <Grid.Column width={7}>\n              <GameArea/>\n              <HandArea/>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </div>\n  )\n}\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport Home from \"./view/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route path={'/'} component={Home}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Card} from \"./card\";\n\nexport class Log {\n  public playerId: number | null;\n  public card: Card | null;\n\n  constructor(player_id: number | null, card: Card | null) {\n    this.playerId = player_id;\n    this.card = card;\n  }\n}","import {Log} from \"../../types/log\";\nimport {LogAction} from \"../action/LogAction\";\nimport {ADD_LOG} from \"../const/LogConst\";\n\nconst initialState: {\n  logs: Log[],\n} = {\n  logs: [],\n};\n\nfunction LogReducer(state = initialState, action: LogAction) {\n  switch (action.type) {\n    case ADD_LOG:\n      return {\n        ...state,\n        logs: [...state.logs, new Log(action.payload.playerId, action.payload.card)],\n      }\n    default:\n      return {\n        ...state,\n      };\n  }\n}\n\nexport default LogReducer;\n","import {Card} from \"../../types/card\";\nimport {GameAction} from \"../action/GameAction\";\nimport {ADD_HAND, DISCARD_CARD, DRAW, PASS, PUT_CARD, SET_START} from \"../const/GameConst\";\nimport {DRAW_2, REVERSE, SKIP, WILD_DRAW_4} from \"../../const/card\";\nimport {MYSELF} from \"../../const/player\";\n\nconst initialState: {\n  currentPlayerId: number,\n  currentCard: Card | null,\n  isReversed: boolean,\n  hand: Card[],\n  draw: number,\n  hadDrawn: boolean,\n} = {\n  currentPlayerId: 0,\n  currentCard: null,\n  isReversed: false,\n  hand: [],\n  draw: 7,\n  hadDrawn: false,\n};\n\nconst nextPlayer = (currentPlayerId: number, isReversed: boolean) => {\n  if (isReversed) {\n    return (currentPlayerId + 3) % 4;\n  } else {\n    return (currentPlayerId + 1) % 4;\n  }\n};\n\nfunction GameReducer(state = initialState, action: GameAction) {\n  if (action.type === SET_START) {\n    const nextState = {...state};\n    const currentPlayerId = action.payload.playerId;\n    const cardId = action.payload.card.card_id;\n    const nextPlayerId = nextPlayer(currentPlayerId, state.isReversed);\n    const nextNextPlayerId = nextPlayer(nextPlayerId, state.isReversed);\n\n    if (cardId === DRAW_2) {\n      if (nextPlayer(currentPlayerId, false) === MYSELF) {\n        nextState['draw'] = 2;\n      }\n      nextState['currentPlayerId'] = nextNextPlayerId;\n    } else if (cardId === REVERSE) {\n      nextState['isReversed'] = true;\n      nextState['currentPlayerId'] = currentPlayerId;\n    } else if (cardId === SKIP) {\n      nextState['currentPlayerId'] = nextNextPlayerId;\n    } else {\n      nextState['currentPlayerId'] = nextPlayerId;\n    }\n    nextState['currentCard'] = action.payload.card;\n\n    return nextState;\n  } else if (action.type === ADD_HAND) {\n    return {\n      ...state,\n      hand: [...state.hand, action.payload.card],\n      draw: state.draw - 1,\n    }\n  } else if (action.type === PUT_CARD) {\n    const nextState = {...state};\n    const cardId = action.payload.card.card_id;\n    const currentPlayerId = state.currentPlayerId;\n    const nextPlayerId = nextPlayer(currentPlayerId, state.isReversed);\n    const nextNextPlayerId = nextPlayer(nextPlayerId, state.isReversed);\n\n    if (cardId === DRAW_2) {\n      if (nextPlayerId === MYSELF) {\n        nextState['draw'] = 2;\n      }\n      nextState['currentPlayerId'] = nextNextPlayerId;\n    } else if (cardId === REVERSE) {\n      nextState['isReversed'] = !state.isReversed;\n      nextState['currentPlayerId'] = nextPlayer(currentPlayerId, !state.isReversed);\n    } else if (cardId === SKIP) {\n      nextState['currentPlayerId'] = nextNextPlayerId;\n    } else if (cardId === WILD_DRAW_4) {\n      if (nextPlayerId === MYSELF) {\n        nextState['draw'] = 4;\n      }\n      nextState['currentPlayerId'] = nextNextPlayerId;\n    } else {\n      nextState['currentPlayerId'] = nextPlayerId;\n    }\n    nextState['currentCard'] = action.payload.card;\n    nextState['hadDrawn'] = false;\n\n    return nextState;\n  } else if (action.type === DISCARD_CARD) {\n    let hand = [...state.hand];\n    hand.splice(action.payload.index, 1);\n\n    return {\n      ...state,\n      hand,\n    }\n  } else if (action.type === PASS) {\n    return {\n      ...state,\n      currentPlayerId: nextPlayer(state.currentPlayerId, state.isReversed),\n      hadDrawn: false,\n    }\n  } else if (action.type === DRAW) {\n    return {\n      ...state,\n      draw: 1,\n      hadDrawn: true,\n    }\n  }\n\n  return {\n    ...state,\n  };\n}\n\nexport default GameReducer;\n","import {combineReducers} from \"redux\";\nimport LogReducer from \"./LogReducer\";\nimport GameReducer from \"./GameReducer\";\n\nexport const RootReducer = combineReducers({\n  log: LogReducer,\n  game: GameReducer,\n})\n\nexport type RootState = ReturnType<typeof RootReducer>;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-less/semantic.less';\nimport {Provider} from 'react-redux';\nimport {createStore} from \"redux\";\n\nimport {RootReducer, RootState} from \"./redux/reducer/RootReducer\";\n\nimport 'react-redux'\n\ndeclare module 'react-redux' {\n  interface DefaultRootState extends RootState {\n  }\n}\n\nconst store = createStore(RootReducer)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}